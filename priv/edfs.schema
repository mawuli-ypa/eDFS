%% @doc Number of replicas on distinct nodes
{mapping, "rfactor", "edfs.rfactor", [
  {default,  5},
  {datatype, integer}
]}.


%% @doc Number of replica responses needed for a successful read
{mapping, "read_quorum", "edfs.read_quorum", [
  {default,  2},
  {datatype, integer}
]}.

%% @doc Number of replica responses needed for a successful write
{mapping, "write_quorum", "edfs.write_quorum", [
  {default,  3},
  {datatype, integer}
]}.


%% @doc enable SSL authentication
{mapping, "security.ssl", "edfs.ssl", [
  {datatype, {enum, [on, off, debug]}},
  {commented, on}
]}.

%% @doc Default cert location for https can be overridden
%% with the ssl config variable, for example:
{mapping, "ssl.certfile", "edfs.ssl.certfile", [
  {commented, "{{platform_etc_dir}}/cert.pem"}
]}.

%% @doc Default key location for https can be overridden
%% with the ssl config variable, for example:
{mapping, "ssl.keyfile", "edfs.ssl.keyfile", [
  {commented, "{{platform_etc_dir}}/key.pem"}
]}.

%% @doc where do you want the console.log output:
%% off : nowhere
%% file: the file specified by log.console.file
%% console : standard out
%% both : log.console.file and standard out.
{mapping, "log.console", "lager.handlers", [
  {default, file},
  {datatype, {enum, [off, file, console, both]}}
]}.

%% @doc the log level of the console log
{mapping, "log.console.level", "lager.handlers", [
  {default, info},
  {datatype, {enum, [debug, info, warning, error]}}
]}.

%% @doc location of the console log
{mapping, "log.console.file", "lager.handlers", [
  {default, "./log/console.log"}
]}.

%% @doc location of the error log
{mapping, "log.error.file", "lager.handlers", [
  {default, "./log/error.log"}
]}.

%% @doc turn on syslog
{mapping, "log.syslog", "lager.handlers", [
  {default, off},
  {datatype, {enum, [on, off]}}
]}.

{ translation,
  "lager.handlers",
  fun(Conf) ->
    SyslogHandler = case cuttlefish:conf_get("log.syslog", Conf) of
      on ->  [{lager_syslog_backend, ["edfs", daemon, info]}];
      _ -> []
    end,
    ErrorHandler = case cuttlefish:conf_get("log.error.file", Conf) of
      undefined -> [];
      ErrorFilename -> [{lager_file_backend, [{file, ErrorFilename},
                                              {level, error},
                                              {size, 10485760},
                                              {date, "$D0"},
                                              {count, 5}]}]
    end,

    ConsoleLogLevel = cuttlefish:conf_get("log.console.level", Conf),
    ConsoleLogFile = cuttlefish:conf_get("log.console.file", Conf),

    ConsoleHandler = {lager_console_handler, ConsoleLogLevel},
    ConsoleFileHandler = {lager_file_backend, [{file, ConsoleLogFile},
                                                {level, ConsoleLogLevel},
                                                {size, 10485760},
                                                {date, "$D0"},
                                                {count, 5}]},

    ConsoleHandlers = case cuttlefish:conf_get("log.console", Conf) of
      off -> [];
      file -> [ConsoleFileHandler];
      console -> [ConsoleHandler];
      both -> [ConsoleHandler, ConsoleFileHandler];
      _ -> []
    end,
    SyslogHandler ++ ConsoleHandlers ++ ErrorHandler
  end
}.

%% SASL
{mapping, "sasl", "sasl.sasl_error_logger", [
  {default, off},
  {datatype, {enum, [on, off]}},
  {level, advanced}
]}.

{ translation,
  "sasl.sasl_error_logger",
  fun(Conf) ->
    case cuttlefish:conf_get("sasl", Conf) of
        on -> true;
        _ -> false
    end
  end
}.

%% HTTP Listeners
%% @doc listener.<name> is an IP address and TCP port that the eDFS will bind to
%% This <name> can be either tcp, ssl
{mapping, "listener.$name", "edfs.listener", [
  {default, "random"},
  {datatype, [ip, {atom, random}]},
  {include_default, "tcp"}
]}.

{translation,
"edfs.listener",
fun(Conf) ->
  List1 = lists:filter(
    fun({Var, _V}) ->
      cuttlefish_variable:is_fuzzy_match(Var, ["listener","$name"])
    end,
    Conf),
  Listeners = [ begin
    [_, Name] = NameVariable,
    {list_to_atom(Name), Address}
  end || {NameVariable, Address} <- List1]

end}.


%% @doc handoff.port is the TCP port that eDFS uses for
%% intra-cluster data handoff.
{mapping, "handoff.port", "edfs.handoff_port", [
  {default, 8099},
  {datatype, integer}
]}.

%% @doc To encrypt eDFS intra-cluster data handoff traffic,
%% uncomment the following line and edit its path to an
%% appropriate certfile and keyfile.
{mapping, "handoff.ssl.certfile", "edfs.handoff_ssl_certfile", [
  {commented, "/tmp/hello.pem"}
]}.

%% @doc if you need a seperate keyfile for handoff
{mapping, "handoff.ssl.keyfile", "edfs.handoff_ssl_options.keyfile", []}.


%% Platform-specific installation paths (substituted by rebar)
{mapping, "platform_bin_dir", "edfs.platform_bin_dir", [
  {default, "./bin"}
]}.

{mapping, "platform_data_dir", "edfs.platform_data_dir", [
  {default, "./data"}
]}.

{mapping, "platform_etc_dir", "edfs.platform_etc_dir", [
  {default, "./etc"}
]}.

{mapping, "platform_lib_dir", "edfs.platform_lib_dir", [
  {default, "./lib"}
]}.

{mapping, "platform_log_dir", "edfs.platform_log_dir", [
  {default, "./log"}
]}.

%% @doc Size, in bytes, of the in-memory buffer.  When this
%% threshold has been reached the data is transformed
%% into a segment file which resides on disk.
{mapping, "buffer_rollover_size", "edfs.buffer_rollover_size", [
  {default, "1MB"},
  {datatype, bytesize}
]}.

%% Lager Config

%% @doc Whether to write a crash log, and where.
%% Commented/omitted/undefined means no crash logger.
{mapping, "log.crash.file", "lager.crash_log", [
  {default, "./log/crash.log"}
]}.

%% @doc Maximum size in bytes of events in the crash log - defaults to 65536
%% @datatype integer
%% @mapping
{mapping, "log.crash.msg_size", "lager.crash_log_msg_size", [
  {default, "64KB"},
  {datatype, bytesize}
]}.

%% @doc Maximum size of the crash log in bytes, before its rotated, set
%% to 0 to disable rotation - default is 0
{mapping, "log.crash.size", "lager.crash_log_size", [
  {default, "10MB"},
  {datatype, bytesize}
]}.

%% @doc What time to rotate the crash log. Default set to daily
{mapping, "log.crash.date", "lager.crash_log_date", [
  {default, "$D0"}
]}.

%% @doc Number of rotated crash logs to keep, 0 means keep only the
%% current one - default is 10
{mapping, "log.crash.count", "lager.crash_log_count", [
  {default, 10},
  {datatype, integer}
]}.

%% @doc Whether to redirect error_logger messages into lager - defaults to true
{mapping, "log.error.redirect", "lager.error_logger_redirect", [
  {default, on},
  {datatype, {enum, [on, off]}}
]}.

{ translation,
  "lager.error_logger_redirect", fun(Conf) ->
    Setting = cuttlefish:conf_get("log.error.redirect", Conf),
    case Setting of
      on -> true;
      off -> false;
      _Default -> true
    end
end}.


%% @doc Authentication
%% Valid styles are: off, userlist
{mapping, "auth", "edfs.auth", [
  {default, userlist},
  {datatype, {enum, [off, userlist]}}
]}.

{translation,
"edfs.auth",
fun(Conf) ->
  case cuttlefish:conf_get("auth", Conf) of
    userlist -> userlist;
    off -> none;
    _ -> none
  end
end}.

%% @doc If auth is set to 'userlist' then this is the
%% list of usernames and passwords for access to the
%% admin panel.
{mapping, "auth.user.$username.password", "edfs.userlist", [
  {default, "pass"},
  {include_default, "admin"}
]}.

{translation,
"edfs.userlist",
fun(Conf) ->
  UserList1 = lists:filter(
    fun({Var, _V}) ->
      cuttlefish_variable:is_fuzzy_match(Var, ["auth","user","$username","password"])
    end,
    Conf),
  UserList = [ begin
    [_, _, Username, _] = UserVariable,
    {Username, Password}
  end || {UserVariable, Password} <- UserList1]

end}.


%%% Things that need to be in vm.args, but never tuned
{mapping, "erlang.smp", "vm_args.-smp", [
  {default, "enable"},
  {level, advanced}
]}.

{mapping, "erlang.W", "vm_args.+W", [
  {default, "w"},
  {level, advanced}
]}.

{mapping, "erlang.K", "vm_args.+K", [
  {default, "true"},
  {level, advanced}
]}.

%%%% Tunables
%% @doc Name of the eDFS node
{mapping, "nodename", "vm_args.-name", [
  {default, "dev1@127.0.0.1"}
]}.

%% @doc Cookie for distributed node communication.  All nodes in the same cluster
%% should use the same cookie or they will not be able to communicate.
{mapping, "distributed_cookie", "vm_args.-setcookie", [
  {default, "eDFS"}
]}.

{mapping, "erlang.asyc_threads", "vm_args.+A", [
  {default, "64"}
]}.

%% @doc Increase number of concurrent ports/sockets
{mapping, "erlang.max_ports", "vm_args.-env ERL_MAX_PORTS", [
  {default, "64000"}
]}.

%% @doc Tweak GC to run more often
{mapping, "erlang.fullsweep_after", "vm_args.-env ERL_FULLSWEEP_AFTER", [
  {default, "0"},
  {level, advanced}
]}.

%% @doc Set the location of crash dumps
{mapping, "erlang.crash_dump", "vm_args.-env ERL_CRASH_DUMP", [
  {default, "./log/erl_crash.dump"}
]}.

%% @doc Raise the ETS table limit
{mapping, "erlang.max_ets_tables", "vm_args.-env ERL_MAX_ETS_TABLES", [
  {default, "256000"}
]}.

%% @doc Raise the default erlang process limit
{mapping, "process_limit", "vm_args.+P", [
  {datatype, integer},
  {default, 256000}
]}.

{translation, "vm_args.+P",
fun(Conf) ->
  Procs = cuttlefish:conf_get("process_limit", Conf),
  integer_to_list(Procs)
end}.

%% @doc The Erlang/OTP default is 1024 (1 megabyte).
%% See: http://www.erlang.org/doc/man/erl.html#%2bzdbbl
{mapping, "erlang.zdouble", "vm_args.+zdbbl", [
  {commented, "32MB"},
  {datatype, bytesize}
]}.

%% @doc Erlang VM scheduler tuning.
{mapping, "erlang.swiffy", "vm_args.+sfwi", [
  {commented, "500"}
]}.

{mapping, "erlang.scl", "vm_args.+scl", [
  {commented, "false"},
  {datatype, {enum, [true, false]}},
  {level, advanced}
]}.

{mapping, "erlang.sub", "vm_args.+sub", [
  {commented, "true"},
  {datatype, {enum, [true, false]}},
  {level, advanced}
]}.

